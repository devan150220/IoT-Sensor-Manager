{
  "flows": [
    {
      "id": "sample-temperature-flow",
      "type": "tab",
      "label": "Sample Temperature Sensor",
      "disabled": false,
      "info": "Sample flow for temperature sensor monitoring\n\nThis flow demonstrates:\n- MQTT input from temperature sensor\n- JSON parsing of sensor data\n- Data validation and filtering\n- Debug output for monitoring\n- Optional database storage\n\nTopic: sensors/temp-01/data\nPayload: {\"value\": 25.5, \"unit\": \"°C\", \"timestamp\": \"2025-08-19T12:00:00Z\"}"
    },
    {
      "id": "mqtt-temp-input",
      "type": "mqtt in",
      "z": "sample-temperature-flow",
      "name": "Temperature Input",
      "topic": "sensors/temp-01/data",
      "qos": "0",
      "datatype": "auto-detect",
      "broker": "sample-hivemq-broker",
      "nl": false,
      "rap": true,
      "rh": 0,
      "x": 140,
      "y": 100,
      "wires": [["json-parser-temp"]]
    },
    {
      "id": "json-parser-temp",
      "type": "json",
      "z": "sample-temperature-flow",
      "name": "Parse JSON",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 320,
      "y": 100,
      "wires": [["validate-temp-data"]]
    },
    {
      "id": "validate-temp-data",
      "type": "function",
      "z": "sample-temperature-flow",
      "name": "Validate Data",
      "func": "// Validate temperature sensor data\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Add validation timestamp\n    msg.payload.validated_at = new Date().toISOString();\n    \n    // Check for reasonable temperature range (-50 to 100°C)\n    if (msg.payload.value >= -50 && msg.payload.value <= 100) {\n        msg.payload.status = 'valid';\n        return [msg, null]; // Send to valid output\n    } else {\n        msg.payload.status = 'out_of_range';\n        return [null, msg]; // Send to error output\n    }\n} else {\n    msg.payload = {\n        error: 'Invalid data format',\n        received: msg.payload,\n        timestamp: new Date().toISOString()\n    };\n    return [null, msg]; // Send to error output\n}",
      "outputs": 2,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 500,
      "y": 100,
      "wires": [["debug-valid-temp", "store-temp-data"], ["debug-error-temp"]]
    },
    {
      "id": "debug-valid-temp",
      "type": "debug",
      "z": "sample-temperature-flow",
      "name": "Valid Temperature",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 720,
      "y": 80,
      "wires": []
    },
    {
      "id": "debug-error-temp",
      "type": "debug",
      "z": "sample-temperature-flow",
      "name": "Temperature Error",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 720,
      "y": 120,
      "wires": []
    },
    {
      "id": "store-temp-data",
      "type": "function",
      "z": "sample-temperature-flow",
      "name": "Store Data",
      "func": "// Example data storage preparation\n// In a real implementation, you would connect to a database\n\nconst storedData = {\n    sensor_id: 'temp-01',\n    value: msg.payload.value,\n    unit: msg.payload.unit || '°C',\n    timestamp: msg.payload.timestamp,\n    validated_at: msg.payload.validated_at,\n    stored_at: new Date().toISOString()\n};\n\nmsg.payload = storedData;\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 700,
      "y": 160,
      "wires": [["debug-stored-temp"]]
    },
    {
      "id": "debug-stored-temp",
      "type": "debug",
      "z": "sample-temperature-flow",
      "name": "Stored Data",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 880,
      "y": 160,
      "wires": []
    },
    {
      "id": "sample-hivemq-broker",
      "type": "mqtt-broker",
      "name": "HiveMQ Public Broker",
      "broker": "broker.hivemq.com",
      "port": "1883",
      "clientid": "nodered_sample_temp",
      "autoConnect": true,
      "usetls": false,
      "protocolVersion": "4",
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "birthMsg": {},
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "closeMsg": {},
      "willTopic": "",
      "willQos": "0",
      "willPayload": "",
      "willMsg": {},
      "userProps": "",
      "sessionExpiry": ""
    },
    {
      "id": "sample-multi-sensor-flow",
      "type": "tab",
      "label": "Multi-Sensor Dashboard",
      "disabled": false,
      "info": "Sample flow for multiple sensor types\n\nThis flow demonstrates:\n- Multiple MQTT inputs for different sensors\n- Topic-based routing\n- Sensor type detection\n- Unified data processing\n- Dashboard output\n\nSupported sensors:\n- Temperature: sensors/+/temperature\n- Humidity: sensors/+/humidity\n- Pressure: sensors/+/pressure"
    },
    {
      "id": "mqtt-multi-input",
      "type": "mqtt in",
      "z": "sample-multi-sensor-flow",
      "name": "All Sensors",
      "topic": "sensors/+/+",
      "qos": "0",
      "datatype": "auto-detect",
      "broker": "sample-hivemq-broker",
      "nl": false,
      "rap": true,
      "rh": 0,
      "x": 120,
      "y": 200,
      "wires": [["parse-sensor-topic"]]
    },
    {
      "id": "parse-sensor-topic",
      "type": "function",
      "z": "sample-multi-sensor-flow",
      "name": "Parse Topic",
      "func": "// Extract sensor info from topic\nconst topicParts = msg.topic.split('/');\nif (topicParts.length >= 3) {\n    msg.sensorId = topicParts[1];\n    msg.sensorType = topicParts[2];\n    \n    // Parse JSON payload\n    try {\n        if (typeof msg.payload === 'string') {\n            msg.payload = JSON.parse(msg.payload);\n        }\n        \n        // Add metadata\n        msg.payload.sensorId = msg.sensorId;\n        msg.payload.sensorType = msg.sensorType;\n        msg.payload.receivedAt = new Date().toISOString();\n        \n        return msg;\n    } catch (e) {\n        msg.payload = {\n            error: 'Invalid JSON',\n            originalPayload: msg.payload,\n            topic: msg.topic\n        };\n        return msg;\n    }\n} else {\n    msg.payload = {\n        error: 'Invalid topic format',\n        topic: msg.topic,\n        expected: 'sensors/{sensorId}/{sensorType}'\n    };\n    return msg;\n}",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 300,
      "y": 200,
      "wires": [["route-by-sensor-type"]]
    },
    {
      "id": "route-by-sensor-type",
      "type": "switch",
      "z": "sample-multi-sensor-flow",
      "name": "Route by Type",
      "property": "sensorType",
      "propertyType": "msg",
      "rules": [
        {
          "t": "eq",
          "v": "temperature",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "humidity",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "pressure",
          "vt": "str"
        },
        {
          "t": "else"
        }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 4,
      "x": 480,
      "y": 200,
      "wires": [["debug-temperature"], ["debug-humidity"], ["debug-pressure"], ["debug-unknown"]]
    },
    {
      "id": "debug-temperature",
      "type": "debug",
      "z": "sample-multi-sensor-flow",
      "name": "Temperature Data",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 680,
      "y": 160,
      "wires": []
    },
    {
      "id": "debug-humidity",
      "type": "debug",
      "z": "sample-multi-sensor-flow",
      "name": "Humidity Data",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 680,
      "y": 200,
      "wires": []
    },
    {
      "id": "debug-pressure",
      "type": "debug",
      "z": "sample-multi-sensor-flow",
      "name": "Pressure Data",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 680,
      "y": 240,
      "wires": []
    },
    {
      "id": "debug-unknown",
      "type": "debug",
      "z": "sample-multi-sensor-flow",
      "name": "Unknown/Error",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 680,
      "y": 280,
      "wires": []
    }
  ]
}
